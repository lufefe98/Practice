body {
    position: relative;
    margin: 0;
    background: #006400;
}

/* NAVBAR */

nav {
    display: flex;
    flex-flow: row;
    flex: 1;
    align-items: center;
    /* 
    Keeps the items centrally aligned on the vertical axis
    */
    justify-content: space-between;
    /* 
    Done to push the ul to the opposite side of the page without
    having to use margin-left: auto;
    which keeps the theme of using flex-box related properties
    and values.
    */
    position: sticky;
    top: 0px;
    width: 100%;
    height: 10vh;
    padding-left: 20px;
    color: #fff;
    z-index: 10;
    background: #006400;
    box-sizing: border-box;
    box-shadow: 0px 0px 10px 0 rgba(0, 0, 0, 0.75);
}

ul {
    display: flex;
    flex-flow: row;
    justify-content: space-around;
    /* 
    Evenly spacing out the list items
    */
    width: 33%;
    font-weight: bold;
    list-style: none;
}

li {
    flex-grow: 1;
    font-size: 1.25rem;
}
a {
    color: inherit;
    text-decoration: none;
}
.user {
    padding: 5px;
    border: solid 2px #fff;
    border-radius: 5rem;
}
nav > h1 {
    font-size: 3.25rem;
    font-family: 'Playfair Display', serif;
}


/* Main Content */

.main-h1 {
    position: relative;
    color: #fff;
    text-align: center;
    font-size: 2.5rem;
    font-family: 'Source Sans Pro', sans-serif;
}

form {
    position: relative;
    height: auto;
    width: 90vw;
    padding: 15px;
    margin: 2.5% auto 5%;
    background: black;
    opacity: 0.85;
    border-radius: 5px;
    box-sizing: border-box;
    box-shadow: 5px 10px 10px 0 rgba(0, 0, 0, 0.75);
}


label {
    color: #fff;
    float: left;
    clear: left;
    width: 250px;
    font-size: 1.25rem;
    text-align: left;
}
input[title]:hover:after {
    content: "attr(title)";
    background: #001d00;
    position: absolute;
    color: #fff;
}
input, label, button {
    margin-top: 30px;
}
input[type="text"] {
    font-size: 1.2rem;
    width: 24.5%;
    height: 30px;
    border-radius: 5px;
    border: 3px solid #006400;
}
input[type="text"]:focus, input[type="email"]:focus, input[type="password"]:focus {
    outline: none;
    border: 3px solid #05f505;
}
input[type="email"], input[type="password"] {
    font-size: 1.2rem;
    width: 50%;
    height: 30px;
    border-radius: 5px;
    border: 3px solid #006400;
}
button {
    display: block;
    /* 
    Display of block was given so I could center the button
    using auto of margin-left and right
    */
    height: 50px;
    width: 10%;
    clear: left;
    margin-left: auto;
    margin-right: auto;
    color: #fff;
    font-size: 1.25rem;
    border-radius: 40px;
    background: #001d00;
    border: solid 3px #006400;
}
button:hover {
    cursor: pointer;
    background: #006400;
    border: solid 3px #05f505;
}

.contain-toggle {
    display: flex;
}

/* Toggle Switch */
.switch {
    position: relative;
    display: inline;
    width: 60px;
    height: 30px;
  }
.switch input {
    opacity: 0;
    width: 0;
    height: 0;
    /* 
    Done to hide the actual checkbox so we can style the label
    such that it has the appearance of a toggle switch.
    */
}
.slider {
    position: absolute;
    /* 
    Removes the slider from the flow of the document so it can
    won't impact the other elements and thereafter positions
    itself relative to its nearest positioned ancestor, which is
    switch.
    */
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
  }
  .slider:before {
    position: absolute;
    /* 
    The position of is given for the same reasons as above and
    to make it overlay where the original .slider would be.
    */
    content: "";
    height: 22px;
    width: 20px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
  }
  input:checked + .slider {
    background-color: #05f505;
    /* 
    Once the input has been checked by clicking on the label which
    is wrapped around it, the background of the actual .slider
    will turn to the selected color.
    */
  }
  input:focus + .slider {
    box-shadow: 0 0 1px #05f505;
    /* 
    What was described will happen when the actual slider has been
    focused on (eg: by selecting it with the tab button)
    */
  }
  input:checked + .slider:before {
    transform: translateX(30px);
    /* 
    The slider which has been overlayed on .slider which is its
    parent element will translate 30 pixels to the right once the
    input has been checked.
    */
  }

  input:checked + .slider:after {
      position: absolute;
      /* 
      Stops surrounding elements from affecting the pseudo elements
      position by removing it from the flow of the document.
      */
    content: "Yes";
    bottom: 5px;
    left: 70px;
  }
  input + .slider:after {
    position: absolute;
    content: "No";
    bottom: 5px;
    left: 70px;
  }
  .slider.round {
    border-radius: 34px;
  }
  .slider.round:before {
    border-radius: 34px;
  }