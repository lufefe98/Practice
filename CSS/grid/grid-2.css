body {
    background: #fff;
}


/* Line based placement */


.container {
    display: grid;
    grid-template-columns: 1fr 3fr;
    /* This is the template that will determine the size of the items
    which will be placed accordingly using grid-column/grid-row line
    placement
    */
    grid-gap: 20px;
}

header,
footer {
    border-radius: 5px;
    padding: 10px;
    background-color: rgb(207,232,220);
    border: 2px solid rgb(79,185,227);
}

header {
    grid-column: 1 / 3;
    /* 
    Grids have lines and they start from 1 and relate to the writing
    mode of the document (ie: left to right in English and right to left
    in Arabic. In this case, if the writing mode is in english, then
    1 is on the left and the opposite if it is in Arabic).

    Grids can be organised using grid-column or grid-row start/end, but
    they do have a short hand where you simply use either grid-column
    or grid-row and, as seen above, you specify a start point before
    the forward slash and the end point afterwards.
    To target the end column/row, -1 is the value you use.
    NB:  Lines count from the explicit and not implicit grid
    */
    grid-row: 1;
    /* The above determines where the grid item is placed along the
    vertical axis (It determines which row it is, going from top to
    bottom. Therefore, if there are 3 rows and the specified value
    is 2, it would be in the middle of the first and last grid-row).

    Simply using one value tells us where the item is placed and if
    more than 1 item share the same grid-row value, then they occupy the same space
    and if an end point is specified, it could end up taking more space along the vertical
    axis. The same applies with grid-columns.
    */
}
footer {
    grid-column: 1 / 3;
    grid-row: 3;
}

aside {
    border-right: 1px solid #999;
    grid-column: 1;
    grid-row: 2;
}

article {
    grid-column: 2;
    grid-row: 2;
}

hr {
    height: 2px;
    width: 100%;
    margin: 5% auto 5%;
    border: black dashed 1px;
    background: rgb(15, 252, 252);
}


/* Grid template areas */

.container2 {
    display: grid;
    grid-template-areas:
    "header header"
    /* If you want to have an empty area, use a full stop */
    "sidebar content"
    "sidebar footer";
    /* 
    How this works is that you give names to the various grid areas
    as a template and they should be as many grid items as set in the
    grid-template areas.
    They templates can be named anything (Though they should be 
    meaningful names)
    Whenever one of the template areas are removed, the rest of the
    content collapses in on itself and is overlapped by the last
    element, which us this case, is the footer.
    It is not allowed to have an "L" shaped area.
    */
    grid-template-columns: 1fr 3fr;
    gap: 20px;
}

header {
    grid-area: header;
    /* Adding the template name to an element which is in the container
    will place the grid item as it is placed in the template from the
    container.
    It is not allowed to repeat a template area when specifying
    a specific elements grid area.
    */
  }
  
  article {
    grid-area: content;
  }  
  
  aside {
    grid-area: sidebar;
  }
  
  footer {
    grid-area: footer;
  }

/* Grid Frameworks */

.container3 {
    display: grid;
    grid-template-columns: repeat(12, minmax(0,1fr));
    /* 
    The grid framework tends to have 12 to 16 column grids and
    uses line based placemet to place grid items.    
    */
    grid-gap: 20px;
}

.header3 {
    grid-column: 1 / 13;
    grid-row: 1;
}
  
.article3 {
    grid-column: 4 / 13;
    grid-row: 2;
}  
  
.aside3 {
    grid-column: 1 / 4;
    grid-row: 2;
}
  
.footer3 {
    grid-column: 1 / 13;
    grid-row: 3;
}
